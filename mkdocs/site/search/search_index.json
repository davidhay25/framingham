{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"conMan documentation Documentation for the 'conMan' (connectathon manager) application. To load the application, use the url: http://conman.clinfhir.com/connectathon.html?event={event name) where the even name is supplied by the event organizer.","title":"Home"},{"location":"index.html#conman-documentation","text":"Documentation for the 'conMan' (connectathon manager) application. To load the application, use the url: http://conman.clinfhir.com/connectathon.html?event={event name) where the even name is supplied by the event organizer.","title":"conMan documentation"},{"location":"clinical.html","text":"clinical code goes here","title":"Clinical"},{"location":"clinical.html#clinical","text":"code goes here","title":"clinical"},{"location":"createTrack.html","text":"Creating a track Any user can create a track. This is done by clicking the 'Add a new track' link below the list of tracks. The following options are available. Name : The name of the track which will appear in the track list. Keep it short. Track Lead : The person managing the track. If entered (it's optional) then only this person can make changes to the track 0 including changing the track lead. Details Page : A link to a page that has more details on the track. A link to the page is displayed when the track is selected. Event Chat : The Zulip chat stream used for supporing track participants Track Type : The type of track. There are 3 types: Technical tracks contain functionity to record clients and servers participating in the track, and to record the outcome of testing Logical Model Review are for creating 'instances' of ligical models. Less commonly used Resource Graph tracks support the graph builder. Allow direct sample is shown when the track type is Logical model or Resoruce graph and allows a user to enter element values direclty into the model as text. This is convenient, but does prevent data being saved on the server as the data is not consistent with FHIR datatypes. Allow Graphs is shown when the track type is technical, and will show the Graph Builder (which is generally hidden for this track type. At the bottom of the dialog is a tabset with the following options. Description a more complete description of the track. This will be displayed when the track is selected. Scenarios displays the scenarios that have been created for the track and allows them to be re-ordered. Links are any extra links of interest to track participants. They will appear as links when the track is selected. Add the link by clicking the + button to the right Servers & IG is displayed for a track type of Logical Model and Resource Graph and is where the servers for the track are selected. There are 3 servers that should be configured either by selecting them from the list or entering the url to the FHIR root into the text boxes The Terminology server has the terminology resources required (ValueSets, CodeSystems etc) and must support the $expand operation The Conformance server has the conformance resources - eg StructureDefinition The Data server is where resource instances will be saved / loaded - see Server Interaction for details The Implementation Guide is not currently used. The other tabs can be ignored.","title":"createTrack"},{"location":"createTrack.html#creating-a-track","text":"Any user can create a track. This is done by clicking the 'Add a new track' link below the list of tracks. The following options are available. Name : The name of the track which will appear in the track list. Keep it short. Track Lead : The person managing the track. If entered (it's optional) then only this person can make changes to the track 0 including changing the track lead. Details Page : A link to a page that has more details on the track. A link to the page is displayed when the track is selected. Event Chat : The Zulip chat stream used for supporing track participants Track Type : The type of track. There are 3 types: Technical tracks contain functionity to record clients and servers participating in the track, and to record the outcome of testing Logical Model Review are for creating 'instances' of ligical models. Less commonly used Resource Graph tracks support the graph builder. Allow direct sample is shown when the track type is Logical model or Resoruce graph and allows a user to enter element values direclty into the model as text. This is convenient, but does prevent data being saved on the server as the data is not consistent with FHIR datatypes. Allow Graphs is shown when the track type is technical, and will show the Graph Builder (which is generally hidden for this track type. At the bottom of the dialog is a tabset with the following options. Description a more complete description of the track. This will be displayed when the track is selected. Scenarios displays the scenarios that have been created for the track and allows them to be re-ordered. Links are any extra links of interest to track participants. They will appear as links when the track is selected. Add the link by clicking the + button to the right Servers & IG is displayed for a track type of Logical Model and Resource Graph and is where the servers for the track are selected. There are 3 servers that should be configured either by selecting them from the list or entering the url to the FHIR root into the text boxes The Terminology server has the terminology resources required (ValueSets, CodeSystems etc) and must support the $expand operation The Conformance server has the conformance resources - eg StructureDefinition The Data server is where resource instances will be saved / loaded - see Server Interaction for details The Implementation Guide is not currently used. The other tabs can be ignored.","title":"Creating a track"},{"location":"graphBasic.html","text":"What is a graph One of the key features in FHIR is the ability to connect individual resource instances together in a graph (or web) of instances using references between the resources. In this way, scenarios can be created involving many resources. The graph builder allows these graphs to be created and viewed visually. Select a graph To create (or edit) a graph, select the 'Graph Builder' tab that is shown when an appropriate track is selected. Top pane The tab has the following panes. The top pane has a number of sections from left to right. All the scenarios are displayed in a drop down to the upper left. Selecting a scenario will display the graph that has been created by the user for that scenario - or an empty space where the graph can be created. Immediately below the drop down is an 'import' link. Clicking this link displays a dialog containing any graphs that have been created by any user for scenarios in this track. Selecting a graph will create a copy in the current users space where they can edit it (the original is uneffected). Note that any existing graph will be replaced). Next is a description of the scenario. Only a few lines are displayed - clicking the 'eye' icon will display the full details of the scenario. Then, the review purpose (if entered) is displayed. Finally the palette of resource types is displayed. The palette has 3 sub tabs: Core resource types - or the resource types defined in the specification. A subset will be displayed for immediate selection (defined in the scenario), or any type can be selected using the 'Select Direct' link. Logical models are created by the clinFHIR logical modeller. They act the same way as core resource types, but the instances cannot be saved on the server Select patient allows an existing patient from the server Graphs are created by selecting a resource type from the pallette to the upper right and giving it a short name (which is only used as a label on the graph). This will result in a resource of that type being added to the graph. When the scenario is created by the designer, the resource types that are most likely to be needed for that scenario are added to the scenario and will be displayed in the palette Below the top pane, the screen is divided into a left and right pane. Bottom left pane (display) The left pane has a number of sub tabs the List tab displays the resource instances in the graph in the form of a table showing each resource instance, with a number of properties of the resource. The resource Type . Clicking on the type will select it, showing the editor pane to the right. The question mark icon will open the page in the spec that describes that type. The Category of the resource (core or logical). Only core instances can be saved in the data server. The Title of the resource that was entered when the instance was created. It can be changed by clicking on it. The title is saved with the graph, but is not part of the resource itself (ie if the resource is saved to the server, then the title is not part of it). It's purpose is to identify the resource instance in the graph The References tab lists the references from that resource to another. Clicking on the x icon will remove that reference. Finally, the column to the right also has an x icon that will remove the resource instance when clicked. The Graph tab displays the resource instances with lines connecting them. Each line is a reference from one resource to another. Clicking on a resource selects and shows the details in the editor pane to the right. Resources can be dragged around in the graph. Resources that are not connected to any other 'float' in the graph. It pays to connect them as soon as possible. There are a number of links to the upper right of the graph that effect the graph display: Hide Patient suppresses the display of a Patient resource, including any references to it. Set focus hides all resources (and references) other than those that have a direct reference to or from the currently selected resource. When a resource has a focus in this way, the link name changes to Show all Freeze graph stops the dynamic re-arrangement of the graph when a resource is dragged. Useful when creating an image of the graph, which can be done by right clicking on the graph. Notes on scenario allow any note to be attached to the scenario graph. Useful when reviewing a graph, but not often used. Server interaction allows the resources in the graph to be saved on the data server. This is further described here Bottom right tab This tab is where the contents of the currently selected resource","title":"Basic operation"},{"location":"graphBasic.html#what-is-a-graph","text":"One of the key features in FHIR is the ability to connect individual resource instances together in a graph (or web) of instances using references between the resources. In this way, scenarios can be created involving many resources. The graph builder allows these graphs to be created and viewed visually.","title":"What is a graph"},{"location":"graphBasic.html#select-a-graph","text":"To create (or edit) a graph, select the 'Graph Builder' tab that is shown when an appropriate track is selected.","title":"Select a graph"},{"location":"graphBasic.html#top-pane","text":"The tab has the following panes. The top pane has a number of sections from left to right. All the scenarios are displayed in a drop down to the upper left. Selecting a scenario will display the graph that has been created by the user for that scenario - or an empty space where the graph can be created. Immediately below the drop down is an 'import' link. Clicking this link displays a dialog containing any graphs that have been created by any user for scenarios in this track. Selecting a graph will create a copy in the current users space where they can edit it (the original is uneffected). Note that any existing graph will be replaced). Next is a description of the scenario. Only a few lines are displayed - clicking the 'eye' icon will display the full details of the scenario. Then, the review purpose (if entered) is displayed. Finally the palette of resource types is displayed. The palette has 3 sub tabs: Core resource types - or the resource types defined in the specification. A subset will be displayed for immediate selection (defined in the scenario), or any type can be selected using the 'Select Direct' link. Logical models are created by the clinFHIR logical modeller. They act the same way as core resource types, but the instances cannot be saved on the server Select patient allows an existing patient from the server Graphs are created by selecting a resource type from the pallette to the upper right and giving it a short name (which is only used as a label on the graph). This will result in a resource of that type being added to the graph. When the scenario is created by the designer, the resource types that are most likely to be needed for that scenario are added to the scenario and will be displayed in the palette Below the top pane, the screen is divided into a left and right pane.","title":"Top pane"},{"location":"graphBasic.html#bottom-left-pane-display","text":"The left pane has a number of sub tabs the List tab displays the resource instances in the graph in the form of a table showing each resource instance, with a number of properties of the resource. The resource Type . Clicking on the type will select it, showing the editor pane to the right. The question mark icon will open the page in the spec that describes that type. The Category of the resource (core or logical). Only core instances can be saved in the data server. The Title of the resource that was entered when the instance was created. It can be changed by clicking on it. The title is saved with the graph, but is not part of the resource itself (ie if the resource is saved to the server, then the title is not part of it). It's purpose is to identify the resource instance in the graph The References tab lists the references from that resource to another. Clicking on the x icon will remove that reference. Finally, the column to the right also has an x icon that will remove the resource instance when clicked. The Graph tab displays the resource instances with lines connecting them. Each line is a reference from one resource to another. Clicking on a resource selects and shows the details in the editor pane to the right. Resources can be dragged around in the graph. Resources that are not connected to any other 'float' in the graph. It pays to connect them as soon as possible. There are a number of links to the upper right of the graph that effect the graph display: Hide Patient suppresses the display of a Patient resource, including any references to it. Set focus hides all resources (and references) other than those that have a direct reference to or from the currently selected resource. When a resource has a focus in this way, the link name changes to Show all Freeze graph stops the dynamic re-arrangement of the graph when a resource is dragged. Useful when creating an image of the graph, which can be done by right clicking on the graph. Notes on scenario allow any note to be attached to the scenario graph. Useful when reviewing a graph, but not often used. Server interaction allows the resources in the graph to be saved on the data server. This is further described here","title":"Bottom left pane (display)"},{"location":"graphBasic.html#bottom-right-tab","text":"This tab is where the contents of the currently selected resource","title":"Bottom right tab"},{"location":"graphDynamic.html","text":"Dynamic scenarios (where the scenario changes over time reflecting a process of some sort) are not really supported well at this time. One way that this could be done (which does require the track to be set up properly) is as follows. Setup Create a track for the dynamic scenario (each track should have only one dynamic scenario). Create a scenario in the track for each of the steps in the process. Creating the graph Select the first scenario and create the graph. Optionally save to the server. Select the next scenario. Click the import link below the scenario selector and import the scenario you just created. Modify as required to represent the next step in the process. Optionally save to the server. Select the next scenario and import the previous one. Modify and optionally save. repeat as required. Note that each graph is creating a new resource instance when importing, so this doesn't really reflect changes to a single resource over time. In fact, there is no real value in saving to the server if all you wanted to do was to see the changing resources.","title":"Representing dynamic scenarios"},{"location":"graphDynamic.html#setup","text":"Create a track for the dynamic scenario (each track should have only one dynamic scenario). Create a scenario in the track for each of the steps in the process.","title":"Setup"},{"location":"graphDynamic.html#creating-the-graph","text":"Select the first scenario and create the graph. Optionally save to the server. Select the next scenario. Click the import link below the scenario selector and import the scenario you just created. Modify as required to represent the next step in the process. Optionally save to the server. Select the next scenario and import the previous one. Modify and optionally save. repeat as required. Note that each graph is creating a new resource instance when importing, so this doesn't really reflect changes to a single resource over time. In fact, there is no real value in saving to the server if all you wanted to do was to see the changing resources.","title":"Creating the graph"},{"location":"graphEdit.html","text":"When a resource instance is selected in the left pane of the browser (whether from the list, graph or server interaction tab) it is available for editing in the right pane (except for linked resources of course). The first tab contains the table editor which is the primary mechanism for adding strcutures data to the resource. Each element is a row in the tablle with the following columns: The first column will have a '>' icon when the element has child elements. Clicking on that icon will display the children. Next is the element name. Mousing over the name will show the description of that element from the spec. The '+' symbol to the right in the column will add another copy of the element, if it is one that can repeat. Elements that have been added in this way have a '-' symbol that will remove them when clicked. Next is the cardinality of the element. Next are the possible datatypes for the element. Clicking the 'edit' icon to the right in the column displays the edit dialog for that datatype where data can be entered. New data will replace old. If there is more than one allowed datatype, then there is a set of radio buttons that you use to select the type you want before clicking edit If the data type is a reference, then the possible types that can be references are shown with a '-->' arrow in front of them. The result of clicking on the type name will vary according to whether there are any instances of that type already in the graph. If there are no instances of that type then the app will prompt to create one If there is a single instance of that type, then the app will offer to create a reference to it If there is more than one instance of that type in the graph, then a dialog is shown allowing you to chose which one to reference (or create a new one) The last columen shoms the current value for that element. The tree view tab shows the resource as a tree, with bolded elements to show which ones have a value in the resource. Clicking the element displays the current value. The permitted datatypes are shown as links - clicking on them displays the data entry dialog. Note that it is not possible to add another copy of an element - this must be done in the table view. The Resource Instance tab shows the json view of the current resource instance. There's a link in the tab that will validate the resource using the current data server $validate operation.","title":"Editing a resource"},{"location":"graphExisting.html","text":"To review existing graphs, select the 'Summary of Graphs' tab which is displayed when a track of type 'scenario' is shown. Select the scenario from the dropdown at the upper left (or check the 'All scenarios' checkbox under the dropdown). All the graphs that have been generated by any of the users will be displayed in the left panel. Selecting any of the graphs will display it in the middle panel. The right hand panel will show the data that has been entered for all of the graphs. This panel has 2 tabs. The All resources tab is a simple list of all the data in all of the resources. The Selected resource tab shows the details of a resource selected in the graph (unless it is a linked resource - see Working with existing patients for details of linked patients). There are a number of detailed views: The tree view displays an expanded tree of the resource. Elements with data in them are bolded. Clicking on the element shows the value of the element in Json format Data and notes shows notes entered for the resource Resource Json is the Json representation of the resource","title":"Reviewing existing graphs"},{"location":"graphExistingPatients.html","text":"The default operation of the Graph builder is to build graphs representing scenarios which are saved in an application database on the conMan server - and can be viewed by others . The resources in the graph can also be saved to a FHIR server, as described in the Server interaction page. When they are saved in a FHIR server, they are just like any other resource instance there. However there are situations where you want to 'share' resources across different graphs - and potentially different graphs from different users. To do this, you need to follow a specific process which is to 'connect' the graph with an existing patient in the server. When you do this, the other resources that reference that patient can be included (or linked to) in your graph - but they cannot be edited. It is quite possible for a single patient on the server to have resources created by different people, but only the creator can subsequently modify the resources they create. Here's a diagram showing the relationship between the Authoring and Linking graphs - only the author can update. There are a couple of ways that resources can be linked. In both cases the key is to 'connect' a graph with a Patient resource on the data server - after which the resources associated with that Patient (technically, in the patient compartment can be linked to any graph. Existing patient This describes the process where the patient - and other resources already exist on the server. This can be done by any number of users simultaneously (though note that the testing has not been thorough :) ) Create a new graph. It should be empty to start with. Click the 'Select Patient' tab on the palette. There is a text box into which you can enter the patients name. Click the 'Search' link. The app will retrieve all patients with that name and display them in a list. Click the 'Select' link for the one you want. (Note that the search uses the Patient 'name' search parameter) Once that has happened, the patient is added to the graph with a category of 'core (linked)'. Because it was not created in this graph it cannot be modified - though it can be on the server. If you select it in the graph, the editor will show only the Json contents. However, if you select the 'Core resource types' tab in the palette, you's see a new link - 'Select from patient'. Clicking that link will display a dialog with all the existing resources for the linked patient on the data server. You can select any of them and they will be added to the graph (again, as linked resources - not editable). You can create other resources in the graph in the usual way and create references from them to the patient (or any of the other linked resources) which can then be saved to the server and used by others. You can continue to update them - though the others will not be able to of course. Note that the 'master' version of the resource is held in the graph. This means that if the copy on the FHIR server is modified, those changes will be lost the next time that the graph is updated. New patient If the patient does not already exist, then it should be created by one of the users first. Make sure to enter the name using the HumanName fields (not just the text, otherwise it won't be found when other users search for it). Save the patient to the server. After that, other graphs can be linked to that patient and add or read other resources associated with that patient. Note that the graph from which the patient is created won't be able link to resources that others create (at this time). If this is a potential issue, the create the Patient using a 'throw away' graph (maybe created by a dummy user), and everybody links to that Patient. This will be addressed in a future release","title":"Working with existing patients"},{"location":"graphExistingPatients.html#existing-patient","text":"This describes the process where the patient - and other resources already exist on the server. This can be done by any number of users simultaneously (though note that the testing has not been thorough :) ) Create a new graph. It should be empty to start with. Click the 'Select Patient' tab on the palette. There is a text box into which you can enter the patients name. Click the 'Search' link. The app will retrieve all patients with that name and display them in a list. Click the 'Select' link for the one you want. (Note that the search uses the Patient 'name' search parameter) Once that has happened, the patient is added to the graph with a category of 'core (linked)'. Because it was not created in this graph it cannot be modified - though it can be on the server. If you select it in the graph, the editor will show only the Json contents. However, if you select the 'Core resource types' tab in the palette, you's see a new link - 'Select from patient'. Clicking that link will display a dialog with all the existing resources for the linked patient on the data server. You can select any of them and they will be added to the graph (again, as linked resources - not editable). You can create other resources in the graph in the usual way and create references from them to the patient (or any of the other linked resources) which can then be saved to the server and used by others. You can continue to update them - though the others will not be able to of course. Note that the 'master' version of the resource is held in the graph. This means that if the copy on the FHIR server is modified, those changes will be lost the next time that the graph is updated.","title":"Existing patient"},{"location":"graphExistingPatients.html#new-patient","text":"If the patient does not already exist, then it should be created by one of the users first. Make sure to enter the name using the HumanName fields (not just the text, otherwise it won't be found when other users search for it). Save the patient to the server. After that, other graphs can be linked to that patient and add or read other resources associated with that patient. Note that the graph from which the patient is created won't be able link to resources that others create (at this time). If this is a potential issue, the create the Patient using a 'throw away' graph (maybe created by a dummy user), and everybody links to that Patient. This will be addressed in a future release","title":"New patient"},{"location":"graphLogical.html","text":"Using clinFHIR logical models in the graph builder The graph builder can also build 'pseudo' resource instances from logical models that have been created using the clinFHIR Logical Modeller. These are useful if you create the models from core resource types and add elements to the models to represent extensions. You can then 'test' out the models in the Graph Builder, and subsequently create the real profiles. These pseudo resources cannot be saved on the data server Using logical models in this way requires specific setup of the scenario. Setup Select the track, and note the conformance server. Open clinfhir and set the conformance server to the same server Load the clinFHIR Logical modeller and create the model, giving it a name that you will recognize later. You can model it on a core resource type or just use an ad hoc model. Make a note of the Model Url (found in the Model tab on the right. In conMan, create a new scenario in the track (or select an existing one) and select the 'types' tab. The logical model can be added at the bottom of the dialog - click the + icon to display a dialog that will allow you to select the logical model you created. Save the scenario. After this, the logical model will be available to select from the Logical Models tab in the palette of the graph builder. You can either select from the dropdown (which can be quite difficult if there are a lot of models) or just enter the url to the model that you noted in step 3 above. Notes You can use a logical model from another server if you wish. In the clinFHIR logical modeler make a note of the full url to the modelas described in step3 above. Then, just add to the scenario as described in step 4.","title":"Logical models"},{"location":"graphLogical.html#using-clinfhir-logical-models-in-the-graph-builder","text":"The graph builder can also build 'pseudo' resource instances from logical models that have been created using the clinFHIR Logical Modeller. These are useful if you create the models from core resource types and add elements to the models to represent extensions. You can then 'test' out the models in the Graph Builder, and subsequently create the real profiles. These pseudo resources cannot be saved on the data server Using logical models in this way requires specific setup of the scenario.","title":"Using clinFHIR logical models in the graph builder"},{"location":"graphLogical.html#setup","text":"Select the track, and note the conformance server. Open clinfhir and set the conformance server to the same server Load the clinFHIR Logical modeller and create the model, giving it a name that you will recognize later. You can model it on a core resource type or just use an ad hoc model. Make a note of the Model Url (found in the Model tab on the right. In conMan, create a new scenario in the track (or select an existing one) and select the 'types' tab. The logical model can be added at the bottom of the dialog - click the + icon to display a dialog that will allow you to select the logical model you created. Save the scenario. After this, the logical model will be available to select from the Logical Models tab in the palette of the graph builder. You can either select from the dropdown (which can be quite difficult if there are a lot of models) or just enter the url to the model that you noted in step 3 above.","title":"Setup"},{"location":"graphLogical.html#notes","text":"You can use a logical model from another server if you wish. In the clinFHIR logical modeler make a note of the full url to the modelas described in step3 above. Then, just add to the scenario as described in step 4.","title":"Notes"},{"location":"graphProcess.html","text":"The following process is suggested for creating a graph. Add the resource instances Create the references Add the resource contents","title":"Basic process"},{"location":"graphServer.html","text":"Saving a resource to the server When resource instances are created in the Graph Builder they are not automatically saved to the data server, which is specified as part of the Track configuration. (They are stored in an internal format on a mongoDb server on the conMan server). However, they can be saved to the Data server using options in the Server Interaction tab at the lower left. This tab contains a table with all the resource instances in the graph. Each resource instance has The resource type (only core types can be saved to the data server). Clicking on the type will select the resource and display the contents in the editor pane . The resource title that identifies it in the graph The resource id that was assigned by the app. This can be used to retrieve the resource directly from the server by any other app using the syntax [host]/{type}/{id} Whether the resourcs instance is valid. Validation is performed by the server (using the $validate operation) and invoked by clicking the 'Validate all' link at the upper right'. There are a number of possible icons and comments than can appear in this column. A green tick means that the resource instance is valid A red cross indicates that it is not. Mousing over the icon will display the error message that was returned from the server (it can also be seen in the edit pane) If there is no actual data in the resource, then a message is displayed To save the resource instances in the current graph to the server, click the 'Submit' button at the top right in the tab. This will attempt to save the resources on the server. If the transaction succeeds then a message is displayed. Otherwise, an error is displayed immediately above the list of resources. A common error is not entering any data for a resource that has a reference to it. As there is no data, it will not be saved, and so the transaction will fail. Entering data in the resource and re-submitting should fix this problem (and clicking the type in the first column will select the resource ready for editing. Technically, what happens is that a transaction containing the resources is created and sent to the server. Resources are saved using the PUT operation (as the app assigns the ids). Validating a resource It is also possible to validate a resource without saving it to the server. This can be done by clicking the Validate all link. There is also a validate option in the editor .","title":"Server interaction"},{"location":"graphServer.html#saving-a-resource-to-the-server","text":"When resource instances are created in the Graph Builder they are not automatically saved to the data server, which is specified as part of the Track configuration. (They are stored in an internal format on a mongoDb server on the conMan server). However, they can be saved to the Data server using options in the Server Interaction tab at the lower left. This tab contains a table with all the resource instances in the graph. Each resource instance has The resource type (only core types can be saved to the data server). Clicking on the type will select the resource and display the contents in the editor pane . The resource title that identifies it in the graph The resource id that was assigned by the app. This can be used to retrieve the resource directly from the server by any other app using the syntax [host]/{type}/{id} Whether the resourcs instance is valid. Validation is performed by the server (using the $validate operation) and invoked by clicking the 'Validate all' link at the upper right'. There are a number of possible icons and comments than can appear in this column. A green tick means that the resource instance is valid A red cross indicates that it is not. Mousing over the icon will display the error message that was returned from the server (it can also be seen in the edit pane) If there is no actual data in the resource, then a message is displayed To save the resource instances in the current graph to the server, click the 'Submit' button at the top right in the tab. This will attempt to save the resources on the server. If the transaction succeeds then a message is displayed. Otherwise, an error is displayed immediately above the list of resources. A common error is not entering any data for a resource that has a reference to it. As there is no data, it will not be saved, and so the transaction will fail. Entering data in the resource and re-submitting should fix this problem (and clicking the type in the first column will select the resource ready for editing. Technically, what happens is that a transaction containing the resources is created and sent to the server. Resources are saved using the PUT operation (as the app assigns the ids).","title":"Saving a resource to the server"},{"location":"graphServer.html#validating-a-resource","text":"It is also possible to validate a resource without saving it to the server. This can be done by clicking the Validate all link. There is also a validate option in the editor .","title":"Validating a resource"},{"location":"selectTrack.html","text":"Tracks Each event can have any number of tracks defined for it. Anyone can create a track - if they make themselves a track lead, then only they can edit it. There are 3 different types of track: Technical tracks are used to record the outcome of testing between a client and a server. Logical model tracks are used to enter data for a single Logical Model (which must be created by the clinFHIR Logical modeller). Resource Graph tracks are used to create graphs of resources (or resource webs) that represent a single scenario Events can be configured to only have a single type of track or any type. If more than one type is suppoered by an event, there is a set of buttons above the tracklist that can be used to show only a single type of track. A tracks is selected by clicking on it in the list to the left. Details about that track will appear to the right, and a number of tabswill be displayed at the top of the screen (the tabs that appear depend on the track type). The create Track page has further details. Track Servers When the track is created of type Resource Graph , the FHIR servers that it uses are selected. There are 3 servers for each track: The Conformance server holds the resource type definitions and profiles (as StructureDefinition resources) The Data server is where the resources in the graph can be saved (The graphs themselves are saved in a separate database). Server interaction is descibed on a separate page. The Terminology server supports the terminology operations that are required - specifically the $expand operation that displays the contents of a ValueSet. The ValueSets themselves and any associated CodeSystem resources must also be stored on the Terminology server. Scenarios","title":"Event organization"},{"location":"selectTrack.html#tracks","text":"Each event can have any number of tracks defined for it. Anyone can create a track - if they make themselves a track lead, then only they can edit it. There are 3 different types of track: Technical tracks are used to record the outcome of testing between a client and a server. Logical model tracks are used to enter data for a single Logical Model (which must be created by the clinFHIR Logical modeller). Resource Graph tracks are used to create graphs of resources (or resource webs) that represent a single scenario Events can be configured to only have a single type of track or any type. If more than one type is suppoered by an event, there is a set of buttons above the tracklist that can be used to show only a single type of track. A tracks is selected by clicking on it in the list to the left. Details about that track will appear to the right, and a number of tabswill be displayed at the top of the screen (the tabs that appear depend on the track type). The create Track page has further details.","title":"Tracks"},{"location":"selectTrack.html#track-servers","text":"When the track is created of type Resource Graph , the FHIR servers that it uses are selected. There are 3 servers for each track: The Conformance server holds the resource type definitions and profiles (as StructureDefinition resources) The Data server is where the resources in the graph can be saved (The graphs themselves are saved in a separate database). Server interaction is descibed on a separate page. The Terminology server supports the terminology operations that are required - specifically the $expand operation that displays the contents of a ValueSet. The ValueSets themselves and any associated CodeSystem resources must also be stored on the Terminology server.","title":"Track Servers"},{"location":"selectTrack.html#scenarios","text":"","title":"Scenarios"}]}