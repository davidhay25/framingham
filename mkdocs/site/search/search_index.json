{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"conMan documentation Documentation for the 'conMan' (connectathon manager) application. To load the application, use the url: http://conman.clinfhir.com/connectathon.html?event={event name) where the even name is supplied by the event organizer.","title":"Home"},{"location":"index.html#conman-documentation","text":"Documentation for the 'conMan' (connectathon manager) application. To load the application, use the url: http://conman.clinfhir.com/connectathon.html?event={event name) where the even name is supplied by the event organizer.","title":"conMan documentation"},{"location":"clinical.html","text":"clinical code goes here","title":"Clinical"},{"location":"clinical.html#clinical","text":"code goes here","title":"clinical"},{"location":"graphBasic.html","text":"Select a graph To create (or edit) a graph, select the 'Graph Builder' tab that is shown when an appropriate track is selected. Top pane The tab has the following panes. The top pane has a number of sections from left to right. All the scenarios are displayed in a drop down to the upper left. Selecting a scenario will display the graph that has been created by the user for that scenario - or an empty space where the graph can be created. Immediately below the drop down is an 'import' link. Clicking this link displays a dialog containing any graphs that have been created by any user for scenarios in this track. Selecting a graph will create a copy in the current users space where they can edit it (the original is uneffected). Note that any existing graph will be replaced). Next is a description of the scenario. Only a few lines are displayed - clicking the 'eye' icon will display the full details of the scenario. Then, the review purpose (if entered) is displayed. Finally the palette of resource types is displayed. The palette has 3 sub tabs: Core resource types - or the resource types defined in the specification. A subset will be displayed for immediate selection (defined in the scenario), or any type can be selected using the 'Select Direct' link. Logical models are created by the clinFHIR logical modeller. They act the same way as core resource types, but the instances cannot be saved on the server Select patient allows an existing patient from the server Graphs are created by selecting a resource type from the pallette to the upper right and giving it a short name (which is only used as a label on the graph). This will result in a resource of that type being added to the graph. When the scenario is created by the designer, the resource types that are most likely to be needed for that scenario are added to the scenario and will be displayed in the palette Below the top pane, the screen is divided into a left and right pane. Bottom left pane (display) The left pane has a number of sub tabs the List tab displays the resource instances in the graph in the form of a table showing each resource instance, with a number of properties of the resource. The resource Type . Clicking on the type will select it, showing the editor pane to the right. The question mark icon will open the page in the spec that describes that type. The Category of the resource (core or logical). Only core instances can be saved in the data server. The Title of the resource that was entered when the instance was created. It can be changed by clicking on it. The title is saved with the graph, but is not part of the resource itself (ie if the resource is saved to the server, then the title is not part of it). It's purpose is to identify the resource instance in the graph The References tab lists the references from that resource to another. Clicking on the x icon will remove that reference. Finally, the column to the right also has an x icon that will remove the resource instance when clicked. The Graph tab displays the resource instances with lines connecting them. Each line is a reference from one resource to another. Clicking on a resource selects and shows the details in the editor pane to the right. Resources can be dragged around in the graph. Resources that are not connected to any other 'float' in the graph. It pays to connect them as soon as possible. There are a number of links to the upper right of the graph that effect the graph display: Hide Patient suppresses the display of a Patient resource, including any references to it. Set focus hides all resources (and references) other than those that have a direct reference to or from the currently selected resource. When a resource has a focus in this way, the link name changes to Show all Freeze graph stops the dynamic re-arrangement of the graph when a resource is dragged. Useful when creating an image of the graph, which can be done by right clicking on the graph. Notes on scenario allow any note to be attached to the scenario graph. Useful when reviewing a graph, but not often used. Server interaction allows the resources in the graph to be saved on the data server. This is further described here Bottom right tab This tab is where the contents of the currently selected resource","title":"Basic operation"},{"location":"graphBasic.html#select-a-graph","text":"To create (or edit) a graph, select the 'Graph Builder' tab that is shown when an appropriate track is selected.","title":"Select a graph"},{"location":"graphBasic.html#top-pane","text":"The tab has the following panes. The top pane has a number of sections from left to right. All the scenarios are displayed in a drop down to the upper left. Selecting a scenario will display the graph that has been created by the user for that scenario - or an empty space where the graph can be created. Immediately below the drop down is an 'import' link. Clicking this link displays a dialog containing any graphs that have been created by any user for scenarios in this track. Selecting a graph will create a copy in the current users space where they can edit it (the original is uneffected). Note that any existing graph will be replaced). Next is a description of the scenario. Only a few lines are displayed - clicking the 'eye' icon will display the full details of the scenario. Then, the review purpose (if entered) is displayed. Finally the palette of resource types is displayed. The palette has 3 sub tabs: Core resource types - or the resource types defined in the specification. A subset will be displayed for immediate selection (defined in the scenario), or any type can be selected using the 'Select Direct' link. Logical models are created by the clinFHIR logical modeller. They act the same way as core resource types, but the instances cannot be saved on the server Select patient allows an existing patient from the server Graphs are created by selecting a resource type from the pallette to the upper right and giving it a short name (which is only used as a label on the graph). This will result in a resource of that type being added to the graph. When the scenario is created by the designer, the resource types that are most likely to be needed for that scenario are added to the scenario and will be displayed in the palette Below the top pane, the screen is divided into a left and right pane.","title":"Top pane"},{"location":"graphBasic.html#bottom-left-pane-display","text":"The left pane has a number of sub tabs the List tab displays the resource instances in the graph in the form of a table showing each resource instance, with a number of properties of the resource. The resource Type . Clicking on the type will select it, showing the editor pane to the right. The question mark icon will open the page in the spec that describes that type. The Category of the resource (core or logical). Only core instances can be saved in the data server. The Title of the resource that was entered when the instance was created. It can be changed by clicking on it. The title is saved with the graph, but is not part of the resource itself (ie if the resource is saved to the server, then the title is not part of it). It's purpose is to identify the resource instance in the graph The References tab lists the references from that resource to another. Clicking on the x icon will remove that reference. Finally, the column to the right also has an x icon that will remove the resource instance when clicked. The Graph tab displays the resource instances with lines connecting them. Each line is a reference from one resource to another. Clicking on a resource selects and shows the details in the editor pane to the right. Resources can be dragged around in the graph. Resources that are not connected to any other 'float' in the graph. It pays to connect them as soon as possible. There are a number of links to the upper right of the graph that effect the graph display: Hide Patient suppresses the display of a Patient resource, including any references to it. Set focus hides all resources (and references) other than those that have a direct reference to or from the currently selected resource. When a resource has a focus in this way, the link name changes to Show all Freeze graph stops the dynamic re-arrangement of the graph when a resource is dragged. Useful when creating an image of the graph, which can be done by right clicking on the graph. Notes on scenario allow any note to be attached to the scenario graph. Useful when reviewing a graph, but not often used. Server interaction allows the resources in the graph to be saved on the data server. This is further described here","title":"Bottom left pane (display)"},{"location":"graphBasic.html#bottom-right-tab","text":"This tab is where the contents of the currently selected resource","title":"Bottom right tab"},{"location":"graphExistingPatients.html","text":"The default operation of the Graph builder is to build graphs representing scenarios which are saved in an application database - and can be viewed by others. The resources in the graph can also be saved to a FHIR server, as described in the Server interaction page. When they are saved in a FHIR server, they are just like any other resource instance there. However there are situations where you want to 'share' resources across different graphs - and potentially different graphs from different users. To do this, you need to follow a specific process which is to 'connect' the graph with an existing patient in the server. When you do this, the other resources that reference that patient can be included in your graph - but they cannot be edited. It is quite possible for a single patient on the server to have resources created by different people, but only the creator can subsequeltly modify the resource. There are a number of ways that this can be done. Existing patient This describes the process where the patient - and other resources already exist on the server. This can be done by any number of users simultaneously (though note that the testing has not been thorough :) ) Create a new graph. It should be empty to start with. Click the 'Select Patient' tab on the palette. There is a text box into which you can enter the patients name. Click the 'Search' link. The app will retrieve all patients with that name and display them in a list. Click the 'Select' link for the one you want. (Note that the search uses the Patient 'name' search parameter) Once that has happened, the patient is added to the graph with a category of 'core (linked)'. Because it was not created in this graph it cannot be modified - though it can be on the server. If you select it in the graph, the editor will show only the Json contents. However, if you select the 'Core resource types' tab in the palette, you's see a new link - 'Select from patient'. Clicking that link will display a dialog with all the existing resources for the linked patient on the data server. You can select any of them and they will be added to the graph (again, as linked resources - not editable). You can create other resources in the graph in the usual way and create references from them to the patient (or any of the other linked resources) which can then be saved to the server and used by others. You can continue to update them - though the others will not be able to of course. Note that the 'master' version of the resource is held in the graph. This means that if the copy on the FHIR server is modified, those changes will be lost the next time that the graph is updated. New patient If the patient does not already exist, then it should be created by one of the users first. After that, other resources can be added in the usual way.","title":"Working with existing patients"},{"location":"graphExistingPatients.html#existing-patient","text":"This describes the process where the patient - and other resources already exist on the server. This can be done by any number of users simultaneously (though note that the testing has not been thorough :) ) Create a new graph. It should be empty to start with. Click the 'Select Patient' tab on the palette. There is a text box into which you can enter the patients name. Click the 'Search' link. The app will retrieve all patients with that name and display them in a list. Click the 'Select' link for the one you want. (Note that the search uses the Patient 'name' search parameter) Once that has happened, the patient is added to the graph with a category of 'core (linked)'. Because it was not created in this graph it cannot be modified - though it can be on the server. If you select it in the graph, the editor will show only the Json contents. However, if you select the 'Core resource types' tab in the palette, you's see a new link - 'Select from patient'. Clicking that link will display a dialog with all the existing resources for the linked patient on the data server. You can select any of them and they will be added to the graph (again, as linked resources - not editable). You can create other resources in the graph in the usual way and create references from them to the patient (or any of the other linked resources) which can then be saved to the server and used by others. You can continue to update them - though the others will not be able to of course. Note that the 'master' version of the resource is held in the graph. This means that if the copy on the FHIR server is modified, those changes will be lost the next time that the graph is updated.","title":"Existing patient"},{"location":"graphExistingPatients.html#new-patient","text":"If the patient does not already exist, then it should be created by one of the users first. After that, other resources can be added in the usual way.","title":"New patient"},{"location":"graphProcess.html","text":"The following process is suggested for creating a graph. Add the resource instances Create the references Add the resource contents","title":"Basic process"},{"location":"graphServer.html","text":"Saving a resource to the server When resource instances are created in the Graph Builder they are not automatically saved to the data server, which is specified as part of the Track configuration. (They are stored in an internal format on a mongoDb server on the conMan server). However, they can be saved to the Data server using options in the Server Interaction tab at the lower left. This tab contains a table with all the resource instances in the graph. Each resource instance has The resource type (only core types can be saved to the data server). Clicking on the type will select the resource and display the contents in the editor pane . The resource title that identifies it in the graph The resource id that was assigned by the app. This can be used to retrieve the resource directly from the server by any other app using the syntax [host]/{type}/{id} Whether the resourcs instance is valid. Validation is performed by the server (using the $validate operation) and invoked by clicking the 'Validate all' link at the upper right'. There are a number of possible icons and comments than can appear in this column. A green tick means that the resource instance is valid A red cross indicates that it is not. Mousing over the icon will display the error message that was returned from the server (it can also be seen in the edit pane) If there is no actual data in the resource, then a message is displayed To save the resource instances in the current graph to the server, click the 'Submit' button at the top right in the tab. This will attempt to save the resources on the server. If the transaction succeeds then a message is displayed. Otherwise, an error is displayed immediately above the list of resources. A common error is not entering any data for a resource that has a reference to it. As there is no data, it will not be saved, and so the transaction will fail. Entering data in the resource and re-submitting should fix this problem (and clicking the type in the first column will select the resource ready for editing. Technically, what happens is that a transaction containing the resources is created and sent to the server. Resources are saved using the PUT operation (as the app assigns the ids). Validating a resource It is also possible to validate a resource without saving it to the server. This can be done by clicking the Validate all link. There is also a validate option in the editor .","title":"Server interaction"},{"location":"graphServer.html#saving-a-resource-to-the-server","text":"When resource instances are created in the Graph Builder they are not automatically saved to the data server, which is specified as part of the Track configuration. (They are stored in an internal format on a mongoDb server on the conMan server). However, they can be saved to the Data server using options in the Server Interaction tab at the lower left. This tab contains a table with all the resource instances in the graph. Each resource instance has The resource type (only core types can be saved to the data server). Clicking on the type will select the resource and display the contents in the editor pane . The resource title that identifies it in the graph The resource id that was assigned by the app. This can be used to retrieve the resource directly from the server by any other app using the syntax [host]/{type}/{id} Whether the resourcs instance is valid. Validation is performed by the server (using the $validate operation) and invoked by clicking the 'Validate all' link at the upper right'. There are a number of possible icons and comments than can appear in this column. A green tick means that the resource instance is valid A red cross indicates that it is not. Mousing over the icon will display the error message that was returned from the server (it can also be seen in the edit pane) If there is no actual data in the resource, then a message is displayed To save the resource instances in the current graph to the server, click the 'Submit' button at the top right in the tab. This will attempt to save the resources on the server. If the transaction succeeds then a message is displayed. Otherwise, an error is displayed immediately above the list of resources. A common error is not entering any data for a resource that has a reference to it. As there is no data, it will not be saved, and so the transaction will fail. Entering data in the resource and re-submitting should fix this problem (and clicking the type in the first column will select the resource ready for editing. Technically, what happens is that a transaction containing the resources is created and sent to the server. Resources are saved using the PUT operation (as the app assigns the ids).","title":"Saving a resource to the server"},{"location":"graphServer.html#validating-a-resource","text":"It is also possible to validate a resource without saving it to the server. This can be done by clicking the Validate all link. There is also a validate option in the editor .","title":"Validating a resource"},{"location":"selectTrack.html","text":"Tracks Each event can have any number of tracks defined for it. Anyone can create a track - if they make themselves a track lead, then only they can edit it. There are 3 different types of track: Technical tracks are used to record the outcome of testing between a client and a server. Logical model tracks are used to enter data for a single Logical Model (which must be created by the clinFHIR Logical modeller). Resource Graph tracks are used to create graphs of resources (or resource webs) that represent a single scenario Events can be configured to only have a single type of track or any type. If more than one type is suppoered by an event, there is a set of buttons above the tracklist that can be used to show only a single type of track. A tracks is selected by clicking on it in the list to the left. Details about that track will appear to the right, and a number of tabswill be displayed at the top of the screen (the tabs that appear depend on the track type). Track Servers When the track is created of type Resource Graph , the FHIR servers that it uses are selected. There are 3 servers for each track: The Conformance server holds the resource type definitions and profiles (as StructureDefinition resources) The Data server is where the resources in the graph can be saved (The graphs themselves are saved in a separate database). Server interaction is descibed on a separate page. The Terminology server supports the terminology operations that are required - specifically the $expand operation that displays the contents of a ValueSet. The ValueSets themselves and any associated CodeSystem resources must also be stored on the Terminology server. Scenarios","title":"Event organization"},{"location":"selectTrack.html#tracks","text":"Each event can have any number of tracks defined for it. Anyone can create a track - if they make themselves a track lead, then only they can edit it. There are 3 different types of track: Technical tracks are used to record the outcome of testing between a client and a server. Logical model tracks are used to enter data for a single Logical Model (which must be created by the clinFHIR Logical modeller). Resource Graph tracks are used to create graphs of resources (or resource webs) that represent a single scenario Events can be configured to only have a single type of track or any type. If more than one type is suppoered by an event, there is a set of buttons above the tracklist that can be used to show only a single type of track. A tracks is selected by clicking on it in the list to the left. Details about that track will appear to the right, and a number of tabswill be displayed at the top of the screen (the tabs that appear depend on the track type).","title":"Tracks"},{"location":"selectTrack.html#track-servers","text":"When the track is created of type Resource Graph , the FHIR servers that it uses are selected. There are 3 servers for each track: The Conformance server holds the resource type definitions and profiles (as StructureDefinition resources) The Data server is where the resources in the graph can be saved (The graphs themselves are saved in a separate database). Server interaction is descibed on a separate page. The Terminology server supports the terminology operations that are required - specifically the $expand operation that displays the contents of a ValueSet. The ValueSets themselves and any associated CodeSystem resources must also be stored on the Terminology server.","title":"Track Servers"},{"location":"selectTrack.html#scenarios","text":"","title":"Scenarios"}]}